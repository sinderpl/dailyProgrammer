/**
Write a function

class Solution { public int solution(int[] A); }

that, given an array A consisting of N integers, returns the number of distinct values in array A.

Assume that:

N is an integer within the range [0..100,000];
each element of array A is an integer within the range [âˆ’1,000,000..1,000,000].
For example, given array A consisting of six elements such that:

 A[0] = 2    A[1] = 1    A[2] = 1
 A[3] = 2    A[4] = 3    A[5] = 1
the function should return 3, because there are 3 distinct values appearing in array A, namely 1, 2 and 3.

Complexity:

expected worst-case time complexity is O(N*log(N));
expected worst-case space complexity is O(N) (not counting the storage required for input arguments).


**/




class Solution {

//Does not work for n < 0 silly mistake..
    public int solution(int[] A) {
        int[] sorted = new int[100000];
        int distinctValues = 0;
        
        //Iterate over each value and map it to another array
        //if value at that array is equal to zero it means we have a distinct value
        for(int x = 0; x < A.length; x++)
        {
            if(sorted[A[x]] == 0)
            {
                sorted[A[x]] += 1;    
                distinctValues += 1;
            }
        }
        return distinctValues;
    }
 //This is a correct solution from online
 public static int solutionA(int[] A) {
		  Arrays.sort(A);
		  int dupl=0;
		  for (int i = 1; i < A.length; i++) {
			    if (A[i] == A[i-1])
				   dupl++;
		  }
		 return A.length - dupl;
	}
}
